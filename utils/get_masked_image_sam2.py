import argparse
import numpy as np
import cv2

def get_masked_image_sam2(frame, bbox, predictor):
    # Convert the frame to RGB
    image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Set the image for the predictor
    predictor.set_image(image)

    # Convert bbox to NumPy array
    box = np.array(bbox, dtype=np.float32)

    # Predict masks using the bounding box
    masks, scores, _ = predictor.predict(
        point_coords=None,
        point_labels=None,
        box=box,
        multimask_output=False,
    )

    if masks is None:
        raise ValueError("No masks generated by the predictor.")

    # Select the mask with the highest score
    max_mask = masks[np.argmax(scores)]

    # Apply the mask to the image
    masked_img = image.copy()
    masked_img[max_mask == 0] = 0

    masked_img = cv2.cvtColor(masked_img, cv2.COLOR_RGB2BGR)

    return masked_img


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("image", help="image to mask")
    parser.add_argument("bbox_first_frame", help="bbox for the object the first frame", type=str)
    parser.add_argument("predictor", help="the predictor")
    args = parser.parse_args()
    get_masked_image_sam2(args.image, eval(args.bbox_first_frame), args.predictor)